
main.out:     file format elf32-littlearm

Disassembly of section .text:

08000000 <myvectors>:
 8000000:	00 08 00 20 11 00 00 08 e5 00 00 08 f1 00 00 08     ... ............

08000010 <main>:
 *
 * Description: The main subroutine
 *
 *************************************************************************/
int main(void)
{
 8000010:	b580      	push	{r7, lr}
 8000012:	af00      	add	r7, sp, #0
	
		*NVIC_CCR = *NVIC_CCR | 0x200; /* Set STKALIGN in NVIC */
 8000014:	f64e 5214 	movw	r2, #60692	; 0xed14
 8000018:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800001c:	f64e 5314 	movw	r3, #60692	; 0xed14
 8000020:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000024:	681b      	ldr	r3, [r3, #0]
 8000026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800002a:	6013      	str	r3, [r2, #0]
	// Init clock system
	  Clk_Init();
 800002c:	f000 f878 	bl	8000120 <Clk_Init>

	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000030:	f04f 0001 	mov.w	r0, #1	; 0x1
 8000034:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000038:	f000 fc4e 	bl	80008d8 <RCC_APB2PeriphClockCmd>
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOA, ENABLE);
 800003c:	f04f 0024 	mov.w	r0, #36	; 0x24
 8000040:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000044:	f000 fc48 	bl	80008d8 <RCC_APB2PeriphClockCmd>
					

	        // Configure PD.2 as output push-pull (LED)
	        GPIO_WriteBit(GPIOD,GPIO_Pin_2,Bit_SET);
 8000048:	f241 4000 	movw	r0, #5120	; 0x1400
 800004c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000050:	f04f 0104 	mov.w	r1, #4	; 0x4
 8000054:	f04f 0201 	mov.w	r2, #1	; 0x1
 8000058:	f000 ff7c 	bl	8000f54 <GPIO_WriteBit>
	        GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 800005c:	f240 0300 	movw	r3, #0	; 0x0
 8000060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000064:	f04f 0204 	mov.w	r2, #4	; 0x4
 8000068:	801a      	strh	r2, [r3, #0]
	        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800006a:	f240 0300 	movw	r3, #0	; 0x0
 800006e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000072:	f04f 0210 	mov.w	r2, #16	; 0x10
 8000076:	609a      	str	r2, [r3, #8]
	        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000078:	f240 0300 	movw	r3, #0	; 0x0
 800007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000080:	f04f 0203 	mov.w	r2, #3	; 0x3
 8000084:	605a      	str	r2, [r3, #4]
	        GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000086:	f241 4000 	movw	r0, #5120	; 0x1400
 800008a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800008e:	f240 0100 	movw	r1, #0	; 0x0
 8000092:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000096:	f000 fe09 	bl	8000cac <GPIO_Init>


	  while(1)
		{
		  
	            GPIOD->BRR |= 0x00000004;
 800009a:	f241 4200 	movw	r2, #5120	; 0x1400
 800009e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80000a2:	f241 4300 	movw	r3, #5120	; 0x1400
 80000a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80000aa:	695b      	ldr	r3, [r3, #20]
 80000ac:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80000b0:	6153      	str	r3, [r2, #20]
	            myDelay(5000000);
 80000b2:	f644 3040 	movw	r0, #19264	; 0x4b40
 80000b6:	f2c0 004c 	movt	r0, #76	; 0x4c
 80000ba:	f000 f81f 	bl	80000fc <myDelay>
	            GPIOD->BSRR |= 0x00000004;
 80000be:	f241 4200 	movw	r2, #5120	; 0x1400
 80000c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80000c6:	f241 4300 	movw	r3, #5120	; 0x1400
 80000ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80000ce:	691b      	ldr	r3, [r3, #16]
 80000d0:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80000d4:	6113      	str	r3, [r2, #16]
	            myDelay(5000000);
 80000d6:	f644 3040 	movw	r0, #19264	; 0x4b40
 80000da:	f2c0 004c 	movt	r0, #76	; 0x4c
 80000de:	f000 f80d 	bl	80000fc <myDelay>
 80000e2:	e7da      	b.n	800009a <main+0x8a>

080000e4 <nmi_handler>:
	         }
}
void nmi_handler(void)
{
 80000e4:	b480      	push	{r7}
 80000e6:	af00      	add	r7, sp, #0
	return ;
}
 80000e8:	46bd      	mov	sp, r7
 80000ea:	bc80      	pop	{r7}
 80000ec:	4770      	bx	lr
 80000ee:	46c0      	nop			(mov r8, r8)

080000f0 <hardfault_handler>:

void hardfault_handler(void)
{
 80000f0:	b480      	push	{r7}
 80000f2:	af00      	add	r7, sp, #0
	return ;
}
 80000f4:	46bd      	mov	sp, r7
 80000f6:	bc80      	pop	{r7}
 80000f8:	4770      	bx	lr
 80000fa:	46c0      	nop			(mov r8, r8)

080000fc <myDelay>:
//Functions definitions
void myDelay(unsigned long delay )
{ 
 80000fc:	b480      	push	{r7}
 80000fe:	b083      	sub	sp, #12
 8000100:	af00      	add	r7, sp, #0
 8000102:	6078      	str	r0, [r7, #4]
 8000104:	e003      	b.n	800010e <myDelay+0x12>
  while(delay) delay--;
 8000106:	687b      	ldr	r3, [r7, #4]
 8000108:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800010c:	607b      	str	r3, [r7, #4]
 800010e:	687b      	ldr	r3, [r7, #4]
 8000110:	2b00      	cmp	r3, #0
 8000112:	d1f8      	bne.n	8000106 <myDelay+0xa>
}
 8000114:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000118:	46bd      	mov	sp, r7
 800011a:	bc80      	pop	{r7}
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			(mov r8, r8)

08000120 <Clk_Init>:
 * Description: Init clock system
 *
 *************************************************************************/

void Clk_Init (void)
{
 8000120:	b580      	push	{r7, lr}
 8000122:	af00      	add	r7, sp, #0
  // 1. Cloking the controller from internal HSI RC (8 MHz)
  RCC_HSICmd(ENABLE);
 8000124:	f04f 0001 	mov.w	r0, #1	; 0x1
 8000128:	f000 f924 	bl	8000374 <RCC_HSICmd>
  // wait until the HSI is ready
  while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 800012c:	f04f 0020 	mov.w	r0, #32	; 0x20
 8000130:	f000 fcaa 	bl	8000a88 <RCC_GetFlagStatus>
 8000134:	4603      	mov	r3, r0
 8000136:	2b00      	cmp	r3, #0
 8000138:	d0f8      	beq.n	800012c <Clk_Init+0xc>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 800013a:	f04f 0000 	mov.w	r0, #0	; 0x0
 800013e:	f000 f95f 	bl	8000400 <RCC_SYSCLKConfig>
  // 2. Enable ext. high frequency OSC
  RCC_HSEConfig(RCC_HSE_ON);
 8000142:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000146:	f000 f8ab 	bl	80002a0 <RCC_HSEConfig>
  // wait until the HSE is ready
  while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 800014a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800014e:	f000 fc9b 	bl	8000a88 <RCC_GetFlagStatus>
 8000152:	4603      	mov	r3, r0
 8000154:	2b00      	cmp	r3, #0
 8000156:	d0f8      	beq.n	800014a <Clk_Init+0x2a>
  // 3. Init PLL
  RCC_PLLConfig(RCC_PLLSource_HSE_Div1,RCC_PLLMul_9); // 72MHz
 8000158:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800015c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000160:	f000 f918 	bl	8000394 <RCC_PLLConfig>
//  RCC_PLLConfig(RCC_PLLSource_HSE_Div2,RCC_PLLMul_9); // 72MHz
  RCC_PLLCmd(ENABLE);
 8000164:	f04f 0001 	mov.w	r0, #1	; 0x1
 8000168:	f000 f93a 	bl	80003e0 <RCC_PLLCmd>
  // wait until the PLL is ready
  while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 800016c:	f04f 0039 	mov.w	r0, #57	; 0x39
 8000170:	f000 fc8a 	bl	8000a88 <RCC_GetFlagStatus>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d0f8      	beq.n	800016c <Clk_Init+0x4c>
  // 4. Set system clock divders
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800017a:	f04f 0000 	mov.w	r0, #0	; 0x0
 800017e:	f000 fa07 	bl	8000590 <RCC_USBCLKConfig>
  RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8000182:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000186:	f000 fa13 	bl	80005b0 <RCC_ADCCLKConfig>
  RCC_PCLK2Config(RCC_HCLK_Div1);
 800018a:	f04f 0000 	mov.w	r0, #0	; 0x0
 800018e:	f000 f9ab 	bl	80004e8 <RCC_PCLK2Config>
  RCC_PCLK1Config(RCC_HCLK_Div2);
 8000192:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000196:	f000 f985 	bl	80004a4 <RCC_PCLK1Config>
  RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800019a:	f04f 0000 	mov.w	r0, #0	; 0x0
 800019e:	f000 f95f 	bl	8000460 <RCC_HCLKConfig>
  // Flash 1 wait state 
  *(vu32 *)0x40022000 = 0x12;
 80001a2:	f242 0300 	movw	r3, #8192	; 0x2000
 80001a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001aa:	f04f 0212 	mov.w	r2, #18	; 0x12
 80001ae:	601a      	str	r2, [r3, #0]
  // 5. Clock system from PLL
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80001b0:	f04f 0002 	mov.w	r0, #2	; 0x2
 80001b4:	f000 f924 	bl	8000400 <RCC_SYSCLKConfig>
}
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <RCC_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
  /* Disable APB2 Peripheral Reset */
  RCC->APB2RSTR = 0x00000000;
 80001c0:	f241 0300 	movw	r3, #4096	; 0x1000
 80001c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001c8:	f04f 0200 	mov.w	r2, #0	; 0x0
 80001cc:	60da      	str	r2, [r3, #12]

  /* Disable APB1 Peripheral Reset */
  RCC->APB1RSTR = 0x00000000;
 80001ce:	f241 0300 	movw	r3, #4096	; 0x1000
 80001d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001d6:	f04f 0200 	mov.w	r2, #0	; 0x0
 80001da:	611a      	str	r2, [r3, #16]

  /* FLITF and SRAM Clock ON */
  RCC->AHBENR = 0x00000014;
 80001dc:	f241 0300 	movw	r3, #4096	; 0x1000
 80001e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001e4:	f04f 0214 	mov.w	r2, #20	; 0x14
 80001e8:	615a      	str	r2, [r3, #20]

  /* Disable APB2 Peripheral Clock */
  RCC->APB2ENR = 0x00000000;
 80001ea:	f241 0300 	movw	r3, #4096	; 0x1000
 80001ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001f2:	f04f 0200 	mov.w	r2, #0	; 0x0
 80001f6:	619a      	str	r2, [r3, #24]

  /* Disable APB1 Peripheral Clock */
  RCC->APB1ENR = 0x00000000;
 80001f8:	f241 0300 	movw	r3, #4096	; 0x1000
 80001fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000200:	f04f 0200 	mov.w	r2, #0	; 0x0
 8000204:	61da      	str	r2, [r3, #28]

  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8000206:	f241 0200 	movw	r2, #4096	; 0x1000
 800020a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800020e:	f241 0300 	movw	r3, #4096	; 0x1000
 8000212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800021c:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits*/
  RCC->CFGR &= 0xF8FF0000;
 800021e:	f241 0200 	movw	r2, #4096	; 0x1000
 8000222:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000226:	f241 0300 	movw	r3, #4096	; 0x1000
 800022a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800022e:	6859      	ldr	r1, [r3, #4]
 8000230:	f240 0300 	movw	r3, #0	; 0x0
 8000234:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000238:	ea01 0303 	and.w	r3, r1, r3
 800023c:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFF;
 800023e:	f241 0200 	movw	r2, #4096	; 0x1000
 8000242:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000246:	f241 0300 	movw	r3, #4096	; 0x1000
 800024a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000258:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFF;
 800025a:	f241 0200 	movw	r2, #4096	; 0x1000
 800025e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000262:	f241 0300 	movw	r3, #4096	; 0x1000
 8000266:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000270:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFF;
 8000272:	f241 0200 	movw	r2, #4096	; 0x1000
 8000276:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800027a:	f241 0300 	movw	r3, #4096	; 0x1000
 800027e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000288:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800028a:	f241 0300 	movw	r3, #4096	; 0x1000
 800028e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000292:	f04f 0200 	mov.w	r2, #0	; 0x0
 8000296:	609a      	str	r2, [r3, #8]
}
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			(mov r8, r8)

080002a0 <RCC_HSEConfig>:
*                         clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HSEConfig(u32 RCC_HSE)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80002a8:	f241 0200 	movw	r2, #4096	; 0x1000
 80002ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002b0:	f241 0300 	movw	r3, #4096	; 0x1000
 80002b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80002c0:	f241 0200 	movw	r2, #4096	; 0x1000
 80002c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002c8:	f241 0300 	movw	r3, #4096	; 0x1000
 80002cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002d6:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002e2:	d004      	beq.n	80002ee <RCC_HSEConfig+0x4e>
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80002ea:	d00d      	beq.n	8000308 <RCC_HSEConfig+0x68>
 80002ec:	e018      	b.n	8000320 <RCC_HSEConfig+0x80>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80002ee:	f241 0200 	movw	r2, #4096	; 0x1000
 80002f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002f6:	f241 0300 	movw	r3, #4096	; 0x1000
 80002fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000304:	6013      	str	r3, [r2, #0]
 8000306:	e00b      	b.n	8000320 <RCC_HSEConfig+0x80>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000308:	f241 0200 	movw	r2, #4096	; 0x1000
 800030c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000310:	f241 0300 	movw	r3, #4096	; 0x1000
 8000314:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800031e:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8000320:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	46c0      	nop			(mov r8, r8)

0800032c <RCC_AdjustHSICalibrationValue>:
*                    This parameter must be a number between 0 and 0x1F.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AdjustHSICalibrationValue(u8 HSICalibrationValue)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
  u32 tmpreg = 0;
 8000336:	f04f 0300 	mov.w	r3, #0	; 0x0
 800033a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800033c:	f241 0300 	movw	r3, #4096	; 0x1000
 8000340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[7:3] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800034e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[7:3] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800035e:	f241 0300 	movw	r3, #4096	; 0x1000
 8000362:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	f107 0714 	add.w	r7, r7, #20	; 0x14
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <RCC_HSICmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HSICmd(FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 800037c:	f240 0300 	movw	r3, #0	; 0x0
 8000380:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	f107 070c 	add.w	r7, r7, #12	; 0xc
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	46c0      	nop			(mov r8, r8)

08000394 <RCC_PLLConfig>:
*                    This parameter can be RCC_PLLMul_x where x:[2,16]
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLConfig(u32 RCC_PLLSource, u32 RCC_PLLMul)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0;
 800039e:	f04f 0300 	mov.w	r3, #0	; 0x0
 80003a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80003a4:	f241 0300 	movw	r3, #4096	; 0x1000
 80003a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[21:18] bits */
  tmpreg &= CFGR_PLL_Mask;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003b6:	60fb      	str	r3, [r7, #12]

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	ea42 0203 	orr.w	r2, r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	ea43 0302 	orr.w	r3, r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80003c8:	f241 0300 	movw	r3, #4096	; 0x1000
 80003cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	605a      	str	r2, [r3, #4]
}
 80003d4:	f107 0714 	add.w	r7, r7, #20	; 0x14
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	46c0      	nop			(mov r8, r8)

080003e0 <RCC_PLLCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLCmd(FunctionalState NewState)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 80003e8:	f240 0360 	movw	r3, #96	; 0x60
 80003ec:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			(mov r8, r8)

08000400 <RCC_SYSCLKConfig>:
*                       - RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8000408:	f04f 0300 	mov.w	r3, #0	; 0x0
 800040c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800040e:	f241 0300 	movw	r3, #4096	; 0x1000
 8000412:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	f023 0303 	bic.w	r3, r3, #3	; 0x3
 8000420:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	ea42 0303 	orr.w	r3, r2, r3
 800042a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800042c:	f241 0300 	movw	r3, #4096	; 0x1000
 8000430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	605a      	str	r2, [r3, #4]
}
 8000438:	f107 0714 	add.w	r7, r7, #20	; 0x14
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			(mov r8, r8)

08000444 <RCC_GetSYSCLKSource>:
*                       - 0x00: HSI used as system clock
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8000448:	f241 0300 	movw	r3, #4096	; 0x1000
 800044c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <RCC_HCLKConfig>:
*                       - RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HCLKConfig(u32 RCC_HCLK)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8000468:	f04f 0300 	mov.w	r3, #0	; 0x0
 800046c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_HCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800046e:	f241 0300 	movw	r3, #4096	; 0x1000
 8000472:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[7:4] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000480:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[7:4] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	ea42 0303 	orr.w	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800048c:	f241 0300 	movw	r3, #4096	; 0x1000
 8000490:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	605a      	str	r2, [r3, #4]
}
 8000498:	f107 0714 	add.w	r7, r7, #20	; 0x14
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			(mov r8, r8)

080004a4 <RCC_PCLK1Config>:
*                       - RCC_HCLK_Div16: APB1 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK1Config(u32 RCC_PCLK1)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80004ac:	f04f 0300 	mov.w	r3, #0	; 0x0
 80004b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_PCLK(RCC_PCLK1));

  tmpreg = RCC->CFGR;
 80004b2:	f241 0300 	movw	r3, #4096	; 0x1000
 80004b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[10:8] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004c4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[10:8] bits according to RCC_PCLK1 value */
  tmpreg |= RCC_PCLK1;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	ea42 0303 	orr.w	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004d0:	f241 0300 	movw	r3, #4096	; 0x1000
 80004d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	605a      	str	r2, [r3, #4]
}
 80004dc:	f107 0714 	add.w	r7, r7, #20	; 0x14
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			(mov r8, r8)

080004e8 <RCC_PCLK2Config>:
*                       - RCC_HCLK_Div16: APB2 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK2Config(u32 RCC_PCLK2)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80004f0:	f04f 0300 	mov.w	r3, #0	; 0x0
 80004f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_PCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 80004f6:	f241 0300 	movw	r3, #4096	; 0x1000
 80004fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[13:11] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000508:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[13:11] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2 << 3;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	ea43 0302 	orr.w	r3, r3, r2
 8000516:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000518:	f241 0300 	movw	r3, #4096	; 0x1000
 800051c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	605a      	str	r2, [r3, #4]
}
 8000524:	f107 0714 	add.w	r7, r7, #20	; 0x14
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	46c0      	nop			(mov r8, r8)

08000530 <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert(IS_RCC_IT(RCC_IT));
  assert(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00f      	beq.n	8000562 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) 0x40021009 |= RCC_IT;
 8000542:	f241 0109 	movw	r1, #4105	; 0x1009
 8000546:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800054a:	f241 0309 	movw	r3, #4105	; 0x1009
 800054e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	ea42 0303 	orr.w	r3, r2, r3
 800055c:	b2db      	uxtb	r3, r3
 800055e:	700b      	strb	r3, [r1, #0]
 8000560:	e011      	b.n	8000586 <RCC_ITConfig+0x56>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) 0x40021009 &= ~(u32)RCC_IT;
 8000562:	f241 0209 	movw	r2, #4105	; 0x1009
 8000566:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800056a:	f241 0309 	movw	r3, #4105	; 0x1009
 800056e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2d9      	uxtb	r1, r3
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	ea6f 0303 	mvn.w	r3, r3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	ea01 0303 	and.w	r3, r1, r3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	7013      	strb	r3, [r2, #0]
  }
}
 8000586:	f107 070c 	add.w	r7, r7, #12	; 0xc
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <RCC_USBCLKConfig>:
*                         clock source
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000598:	f240 03d8 	movw	r3, #216	; 0xd8
 800059c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	f107 070c 	add.w	r7, r7, #12	; 0xc
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	46c0      	nop			(mov r8, r8)

080005b0 <RCC_ADCCLKConfig>:
*                       - RCC_PCLK2_Div8: ADC clock = PCLK2/8
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ADCCLKConfig(u32 RCC_ADCCLK)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80005b8:	f04f 0300 	mov.w	r3, #0	; 0x0
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_ADCCLK(RCC_ADCCLK));

  tmpreg = RCC->CFGR;
 80005be:	f241 0300 	movw	r3, #4096	; 0x1000
 80005c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Clear ADCPRE[15:14] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	60fb      	str	r3, [r7, #12]

  /* Set ADCPRE[15:14] bits according to RCC_ADCCLK value */
  tmpreg |= RCC_ADCCLK;
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	ea42 0303 	orr.w	r3, r2, r3
 80005da:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005dc:	f241 0300 	movw	r3, #4096	; 0x1000
 80005e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	605a      	str	r2, [r3, #4]
}
 80005e8:	f107 0714 	add.w	r7, r7, #20	; 0x14
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			(mov r8, r8)

080005f4 <RCC_LSEConfig>:
*                         clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_LSEConfig(u32 RCC_LSE)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_BASE = RCC_LSE_OFF;
 80005fc:	f241 0320 	movw	r3, #4128	; 0x1020
 8000600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000604:	f04f 0200 	mov.w	r2, #0	; 0x0
 8000608:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_BASE = RCC_LSE_OFF;
 800060a:	f241 0320 	movw	r3, #4128	; 0x1020
 800060e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000612:	f04f 0200 	mov.w	r2, #0	; 0x0
 8000616:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d003      	beq.n	800062a <RCC_LSEConfig+0x36>
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d008      	beq.n	800063a <RCC_LSEConfig+0x46>
 8000628:	e00e      	b.n	8000648 <RCC_LSEConfig+0x54>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_BASE = RCC_LSE_ON;
 800062a:	f241 0320 	movw	r3, #4128	; 0x1020
 800062e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000632:	f04f 0201 	mov.w	r2, #1	; 0x1
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e006      	b.n	8000648 <RCC_LSEConfig+0x54>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_BASE = RCC_LSE_Bypass | RCC_LSE_ON;
 800063a:	f241 0320 	movw	r3, #4128	; 0x1020
 800063e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000642:	f04f 0205 	mov.w	r2, #5	; 0x5
 8000646:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
 8000648:	f107 070c 	add.w	r7, r7, #12	; 0xc
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	46c0      	nop			(mov r8, r8)

08000654 <RCC_LSICmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_LSICmd(FunctionalState NewState)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 800065c:	f240 4380 	movw	r3, #1152	; 0x480
 8000660:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	f107 070c 	add.w	r7, r7, #12	; 0xc
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			(mov r8, r8)

08000674 <RCC_RTCCLKConfig>:
*                         by 128 used as RTC clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_RTCCLKConfig(u32 RCC_RTCCLKSource)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800067c:	f241 0200 	movw	r2, #4096	; 0x1000
 8000680:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000684:	f241 0300 	movw	r3, #4096	; 0x1000
 8000688:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800068c:	6a19      	ldr	r1, [r3, #32]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	ea41 0303 	orr.w	r3, r1, r3
 8000694:	6213      	str	r3, [r2, #32]
}
 8000696:	f107 070c 	add.w	r7, r7, #12	; 0xc
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <RCC_RTCCLKCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 80006a8:	f240 433c 	movw	r3, #1084	; 0x43c
 80006ac:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	46c0      	nop			(mov r8, r8)

080006c0 <RCC_GetClocksFreq>:
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b087      	sub	sp, #28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80006c8:	f04f 0300 	mov.w	r3, #0	; 0x0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	f04f 0300 	mov.w	r3, #0	; 0x0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	f04f 0300 	mov.w	r3, #0	; 0x0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	f04f 0300 	mov.w	r3, #0	; 0x0
 80006de:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80006e0:	f241 0300 	movw	r3, #4096	; 0x1000
 80006e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f003 030c 	and.w	r3, r3, #12	; 0xc
 80006ee:	60bb      	str	r3, [r7, #8]

  switch (tmp)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	d00c      	beq.n	8000714 <RCC_GetClocksFreq+0x54>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d010      	beq.n	8000722 <RCC_GetClocksFreq+0x62>
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14d      	bne.n	80007a2 <RCC_GetClocksFreq+0xe2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	f241 2300 	movw	r3, #4608	; 0x1200
 800070c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e04c      	b.n	80007ae <RCC_GetClocksFreq+0xee>
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	f241 2300 	movw	r3, #4608	; 0x1200
 800071a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e045      	b.n	80007ae <RCC_GetClocksFreq+0xee>
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000722:	f241 0300 	movw	r3, #4096	; 0x1000
 8000726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000730:	60fb      	str	r3, [r7, #12]
      pllmull = ( pllmull >> 18) + 2;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8000738:	f103 0302 	add.w	r3, r3, #2	; 0x2
 800073c:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800073e:	f241 0300 	movw	r3, #4096	; 0x1000
 8000742:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800074c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <RCC_GetClocksFreq+0xa8>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	f640 1300 	movw	r3, #2304	; 0x900
 800075a:	f2c0 033d 	movt	r3, #61	; 0x3d
 800075e:	fb03 f202 	mul.w	r2, r3, r2
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	e022      	b.n	80007ae <RCC_GetClocksFreq+0xee>
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8000768:	f241 0300 	movw	r3, #4096	; 0x1000
 800076c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d009      	beq.n	800078e <RCC_GetClocksFreq+0xce>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f640 1300 	movw	r3, #2304	; 0x900
 8000780:	f2c0 033d 	movt	r3, #61	; 0x3d
 8000784:	fb03 f202 	mul.w	r2, r3, r2
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e00f      	b.n	80007ae <RCC_GetClocksFreq+0xee>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	f241 2300 	movw	r3, #4608	; 0x1200
 8000794:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000798:	fb03 f202 	mul.w	r2, r3, r2
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	e005      	b.n	80007ae <RCC_GetClocksFreq+0xee>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	f241 2300 	movw	r3, #4608	; 0x1200
 80007a8:	f2c0 037a 	movt	r3, #122	; 0x7a
 80007ac:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80007ae:	f241 0300 	movw	r3, #4096	; 0x1000
 80007b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007bc:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80007c4:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f241 13e8 	movw	r3, #4584	; 0x11e8
 80007cc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007d0:	5c9b      	ldrb	r3, [r3, r2]
 80007d2:	617b      	str	r3, [r7, #20]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa22 f203 	lsr.w	r2, r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80007e2:	f241 0300 	movw	r3, #4096	; 0x1000
 80007e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007f0:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80007f8:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f241 13e8 	movw	r3, #4584	; 0x11e8
 8000800:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000804:	5c9b      	ldrb	r3, [r3, r2]
 8000806:	617b      	str	r3, [r7, #20]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa22 f203 	lsr.w	r2, r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000816:	f241 0300 	movw	r3, #4096	; 0x1000
 800081a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000824:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800082c:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f241 13e8 	movw	r3, #4584	; 0x11e8
 8000834:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000838:	5c9b      	ldrb	r3, [r3, r2]
 800083a:	617b      	str	r3, [r7, #20]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa22 f203 	lsr.w	r2, r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60da      	str	r2, [r3, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800084a:	f241 0300 	movw	r3, #4096	; 0x1000
 800084e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8000860:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8000868:	f6c0 0300 	movt	r3, #2048	; 0x800
 800086c:	5c9b      	ldrb	r3, [r3, r2]
 800086e:	617b      	str	r3, [r7, #20]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency ; // /presc;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	611a      	str	r2, [r3, #16]
}
 8000878:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	46c0      	nop			(mov r8, r8)

08000884 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00d      	beq.n	80008b0 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000894:	f241 0200 	movw	r2, #4096	; 0x1000
 8000898:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800089c:	f241 0300 	movw	r3, #4096	; 0x1000
 80008a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008a4:	6959      	ldr	r1, [r3, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	ea41 0303 	orr.w	r3, r1, r3
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	e00e      	b.n	80008ce <RCC_AHBPeriphClockCmd+0x4a>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80008b0:	f241 0200 	movw	r2, #4096	; 0x1000
 80008b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008b8:	f241 0300 	movw	r3, #4096	; 0x1000
 80008bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c0:	6959      	ldr	r1, [r3, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	ea6f 0303 	mvn.w	r3, r3
 80008c8:	ea01 0303 	and.w	r3, r1, r3
 80008cc:	6153      	str	r3, [r2, #20]
  }
}
 80008ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00d      	beq.n	8000904 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008e8:	f241 0200 	movw	r2, #4096	; 0x1000
 80008ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008f0:	f241 0300 	movw	r3, #4096	; 0x1000
 80008f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008f8:	6999      	ldr	r1, [r3, #24]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	ea41 0303 	orr.w	r3, r1, r3
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	e00e      	b.n	8000922 <RCC_APB2PeriphClockCmd+0x4a>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000904:	f241 0200 	movw	r2, #4096	; 0x1000
 8000908:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800090c:	f241 0300 	movw	r3, #4096	; 0x1000
 8000910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000914:	6999      	ldr	r1, [r3, #24]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	ea6f 0303 	mvn.w	r3, r3
 800091c:	ea01 0303 	and.w	r3, r1, r3
 8000920:	6193      	str	r3, [r2, #24]
  }
}
 8000922:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00d      	beq.n	8000958 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800093c:	f241 0200 	movw	r2, #4096	; 0x1000
 8000940:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000944:	f241 0300 	movw	r3, #4096	; 0x1000
 8000948:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800094c:	69d9      	ldr	r1, [r3, #28]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	ea41 0303 	orr.w	r3, r1, r3
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	e00e      	b.n	8000976 <RCC_APB1PeriphClockCmd+0x4a>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000958:	f241 0200 	movw	r2, #4096	; 0x1000
 800095c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000960:	f241 0300 	movw	r3, #4096	; 0x1000
 8000964:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000968:	69d9      	ldr	r1, [r3, #28]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	ea6f 0303 	mvn.w	r3, r3
 8000970:	ea01 0303 	and.w	r3, r1, r3
 8000974:	61d3      	str	r3, [r2, #28]
  }
}
 8000976:	f107 070c 	add.w	r7, r7, #12	; 0xc
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00d      	beq.n	80009ac <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000990:	f241 0200 	movw	r2, #4096	; 0x1000
 8000994:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000998:	f241 0300 	movw	r3, #4096	; 0x1000
 800099c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009a0:	68d9      	ldr	r1, [r3, #12]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	ea41 0303 	orr.w	r3, r1, r3
 80009a8:	60d3      	str	r3, [r2, #12]
 80009aa:	e00e      	b.n	80009ca <RCC_APB2PeriphResetCmd+0x4a>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80009ac:	f241 0200 	movw	r2, #4096	; 0x1000
 80009b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009b4:	f241 0300 	movw	r3, #4096	; 0x1000
 80009b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009bc:	68d9      	ldr	r1, [r3, #12]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	ea6f 0303 	mvn.w	r3, r3
 80009c4:	ea01 0303 	and.w	r3, r1, r3
 80009c8:	60d3      	str	r3, [r2, #12]
  }
}
 80009ca:	f107 070c 	add.w	r7, r7, #12	; 0xc
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00d      	beq.n	8000a00 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80009e4:	f241 0200 	movw	r2, #4096	; 0x1000
 80009e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009ec:	f241 0300 	movw	r3, #4096	; 0x1000
 80009f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009f4:	6919      	ldr	r1, [r3, #16]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	ea41 0303 	orr.w	r3, r1, r3
 80009fc:	6113      	str	r3, [r2, #16]
 80009fe:	e00e      	b.n	8000a1e <RCC_APB1PeriphResetCmd+0x4a>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000a00:	f241 0200 	movw	r2, #4096	; 0x1000
 8000a04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a08:	f241 0300 	movw	r3, #4096	; 0x1000
 8000a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a10:	6919      	ldr	r1, [r3, #16]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	ea6f 0303 	mvn.w	r3, r3
 8000a18:	ea01 0303 	and.w	r3, r1, r3
 8000a1c:	6113      	str	r3, [r2, #16]
  }
}
 8000a1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <RCC_BackupResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8000a30:	f240 4340 	movw	r3, #1088	; 0x440
 8000a34:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	46c0      	nop			(mov r8, r8)

08000a48 <RCC_ClockSecuritySystemCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8000a50:	f240 034c 	movw	r3, #76	; 0x4c
 8000a54:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	46c0      	nop			(mov r8, r8)

08000a68 <RCC_MCOConfig>:
*                       - RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_MCOConfig(u8 RCC_MCO)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[26:24] bits to select the MCO source */
  *(vu8 *) 0x40021007 = RCC_MCO;
 8000a72:	f241 0307 	movw	r3, #4103	; 0x1007
 8000a76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <RCC_GetFlagStatus>:
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  u32 tmp = 0;
 8000a92:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000a96:	60fb      	str	r3, [r7, #12]
  u32 statusreg = 0;
 8000a98:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000a9c:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
 8000a9e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000aa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8000ab4:	f241 0300 	movw	r3, #4096	; 0x1000
 8000ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	e00f      	b.n	8000ae2 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d106      	bne.n	8000ad6 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8000ac8:	f241 0300 	movw	r3, #4096	; 0x1000
 8000acc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	e005      	b.n	8000ae2 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000ad6:	f241 0300 	movw	r3, #4096	; 0x1000
 8000ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ade:	6a5b      	ldr	r3, [r3, #36]
 8000ae0:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 031f 	and.w	r3, r3, #31	; 0x1f
 8000ae8:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	fa23 f302 	lsr.w	r3, r3, r2
 8000af2:	f003 0301 	and.w	r3, r3, #1	; 0x1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8000afc:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e002      	b.n	8000b0a <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8000b04:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000b08:	617b      	str	r3, [r7, #20]
  }

  /* Return the flag status */
  return bitstatus;
 8000b0a:	697b      	ldr	r3, [r7, #20]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <RCC_ClearFlag>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* Set RVMF bit to clear the reset flags */
  RCC->CSR |= CSR_RVMF_Set;
 8000b1c:	f241 0200 	movw	r2, #4096	; 0x1000
 8000b20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b24:	f241 0300 	movw	r3, #4096	; 0x1000
 8000b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b2c:	6a5b      	ldr	r3, [r3, #36]
 8000b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b32:	6253      	str	r3, [r2, #36]
}
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	46c0      	nop			(mov r8, r8)

08000b3c <RCC_GetITStatus>:
*                       - RCC_IT_CSS: Clock Security System interrupt
* Output         : None
* Return         : The new state of RCC_IT (SET or RESET).
*******************************************************************************/
ITStatus RCC_GetITStatus(u8 RCC_IT)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8000b46:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8000b4c:	f241 0300 	movw	r3, #4096	; 0x1000
 8000b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	ea02 0303 	and.w	r3, r2, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 8000b60:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e002      	b.n	8000b6e <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 8000b68:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	f107 0714 	add.w	r7, r7, #20	; 0x14
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <RCC_ClearITPendingBit>:
*                       - RCC_IT_CSS: Clock Security System interrupt
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClearITPendingBit(u8 RCC_IT)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) 0x4002100A = RCC_IT;
 8000b86:	f241 030a 	movw	r3, #4106	; 0x100a
 8000b8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b8e:	79fa      	ldrb	r2, [r7, #7]
 8000b90:	701a      	strb	r2, [r3, #0]
}
 8000b92:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..E) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  switch (*(u32*)&GPIOx)
 8000ba4:	f107 0304 	add.w	r3, r7, #4	; 0x4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	f241 0300 	movw	r3, #4096	; 0x1000
 8000bb0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d03e      	beq.n	8000c38 <GPIO_DeInit+0x9c>
 8000bba:	f241 0300 	movw	r3, #4096	; 0x1000
 8000bbe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d80e      	bhi.n	8000be6 <GPIO_DeInit+0x4a>
 8000bc8:	f640 0300 	movw	r3, #2048	; 0x800
 8000bcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d016      	beq.n	8000c04 <GPIO_DeInit+0x68>
 8000bd6:	f640 4300 	movw	r3, #3072	; 0xc00
 8000bda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d01c      	beq.n	8000c1e <GPIO_DeInit+0x82>
 8000be4:	e04e      	b.n	8000c84 <GPIO_DeInit+0xe8>
 8000be6:	f241 4300 	movw	r3, #5120	; 0x1400
 8000bea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d02e      	beq.n	8000c52 <GPIO_DeInit+0xb6>
 8000bf4:	f641 0300 	movw	r3, #6144	; 0x1800
 8000bf8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d034      	beq.n	8000c6c <GPIO_DeInit+0xd0>
 8000c02:	e03f      	b.n	8000c84 <GPIO_DeInit+0xe8>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000c04:	f04f 0004 	mov.w	r0, #4	; 0x4
 8000c08:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000c0c:	f7ff feb8 	bl	8000980 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000c10:	f04f 0004 	mov.w	r0, #4	; 0x4
 8000c14:	f04f 0100 	mov.w	r1, #0	; 0x0
 8000c18:	f7ff feb2 	bl	8000980 <RCC_APB2PeriphResetCmd>
 8000c1c:	e032      	b.n	8000c84 <GPIO_DeInit+0xe8>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000c1e:	f04f 0008 	mov.w	r0, #8	; 0x8
 8000c22:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000c26:	f7ff feab 	bl	8000980 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8000c2a:	f04f 0008 	mov.w	r0, #8	; 0x8
 8000c2e:	f04f 0100 	mov.w	r1, #0	; 0x0
 8000c32:	f7ff fea5 	bl	8000980 <RCC_APB2PeriphResetCmd>
 8000c36:	e025      	b.n	8000c84 <GPIO_DeInit+0xe8>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000c38:	f04f 0010 	mov.w	r0, #16	; 0x10
 8000c3c:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000c40:	f7ff fe9e 	bl	8000980 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000c44:	f04f 0010 	mov.w	r0, #16	; 0x10
 8000c48:	f04f 0100 	mov.w	r1, #0	; 0x0
 8000c4c:	f7ff fe98 	bl	8000980 <RCC_APB2PeriphResetCmd>
 8000c50:	e018      	b.n	8000c84 <GPIO_DeInit+0xe8>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8000c52:	f04f 0020 	mov.w	r0, #32	; 0x20
 8000c56:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000c5a:	f7ff fe91 	bl	8000980 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8000c5e:	f04f 0020 	mov.w	r0, #32	; 0x20
 8000c62:	f04f 0100 	mov.w	r1, #0	; 0x0
 8000c66:	f7ff fe8b 	bl	8000980 <RCC_APB2PeriphResetCmd>
 8000c6a:	e00b      	b.n	8000c84 <GPIO_DeInit+0xe8>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000c6c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000c70:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000c74:	f7ff fe84 	bl	8000980 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000c78:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000c7c:	f04f 0100 	mov.w	r1, #0	; 0x0
 8000c80:	f7ff fe7e 	bl	8000980 <RCC_APB2PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8000c84:	f107 0708 	add.w	r7, r7, #8	; 0x8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000c90:	f04f 0001 	mov.w	r0, #1	; 0x1
 8000c94:	f04f 0101 	mov.w	r1, #1	; 0x1
 8000c98:	f7ff fe72 	bl	8000980 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000c9c:	f04f 0001 	mov.w	r0, #1	; 0x1
 8000ca0:	f04f 0100 	mov.w	r1, #0	; 0x0
 8000ca4:	f7ff fe6c 	bl	8000980 <RCC_APB2PeriphResetCmd>
}
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000cb6:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000ccc:	617b      	str	r3, [r7, #20]
  u32 tmpreg = 0x00, pinmask = 0x00;
 8000cce:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000cd8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030f 	and.w	r3, r3, #15	; 0xf
 8000ce2:	60bb      	str	r3, [r7, #8]

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0310 	and.w	r3, r3, #16	; 0x10
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	ea43 0302 	orr.w	r3, r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d053      	beq.n	8000db0 <GPIO_Init+0x104>
  {
    tmpreg = GPIOx->CRL;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	61bb      	str	r3, [r7, #24]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d0e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	e043      	b.n	8000d9e <GPIO_Init+0xf2>
    {
      pos = ((u32)0x01) << pinpos;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000d1c:	fa03 f302 	lsl.w	r3, r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	ea02 0303 	and.w	r3, r2, r3
 8000d2e:	60fb      	str	r3, [r7, #12]

      if (currentpin == pos)
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d12e      	bne.n	8000d96 <GPIO_Init+0xea>
      {
        pos = pinpos << 2;
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d3e:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	f04f 030f 	mov.w	r3, #15	; 0xf
 8000d46:	fa03 f302 	lsl.w	r3, r3, r2
 8000d4a:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	ea6f 0203 	mvn.w	r2, r3
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	ea03 0302 	and.w	r3, r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	fa03 f202 	lsl.w	r2, r3, r2
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	ea43 0302 	orr.w	r3, r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b28      	cmp	r3, #40
 8000d70:	d106      	bne.n	8000d80 <GPIO_Init+0xd4>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000d78:	fa03 f202 	lsl.w	r2, r3, r2
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b48      	cmp	r3, #72
 8000d86:	d106      	bne.n	8000d96 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((u32)0x01) << pinpos);
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000d8e:	fa03 f202 	lsl.w	r2, r3, r2
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	611a      	str	r2, [r3, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	f103 0301 	add.w	r3, r3, #1	; 0x1
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	d9b8      	bls.n	8000d16 <GPIO_Init+0x6a>
        {
          GPIOx->BSRR = (((u32)0x01) << pinpos);
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	601a      	str	r2, [r3, #0]
    tmpreg = 0;
 8000daa:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000dae:	61bb      	str	r3, [r7, #24]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	2bff      	cmp	r3, #255
 8000db6:	d959      	bls.n	8000e6c <GPIO_Init+0x1c0>
  {
    tmpreg = GPIOx->CRH;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000dbe:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	e04c      	b.n	8000e60 <GPIO_Init+0x1b4>
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	f103 0308 	add.w	r3, r3, #8	; 0x8
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000dd2:	fa03 f302 	lsl.w	r3, r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	ea02 0303 	and.w	r3, r2, r3
 8000de4:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d134      	bne.n	8000e58 <GPIO_Init+0x1ac>
      {
        pos = pinpos << 2;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000df4:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	f04f 030f 	mov.w	r3, #15	; 0xf
 8000dfc:	fa03 f302 	lsl.w	r3, r3, r2
 8000e00:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	ea6f 0203 	mvn.w	r2, r3
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	ea03 0302 	and.w	r3, r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	fa03 f202 	lsl.w	r2, r3, r2
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	ea43 0302 	orr.w	r3, r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b28      	cmp	r3, #40
 8000e26:	d109      	bne.n	8000e3c <GPIO_Init+0x190>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	f103 0308 	add.w	r3, r3, #8	; 0x8
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000e34:	fa03 f202 	lsl.w	r2, r3, r2
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b48      	cmp	r3, #72
 8000e42:	d109      	bne.n	8000e58 <GPIO_Init+0x1ac>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f103 0308 	add.w	r3, r3, #8	; 0x8
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000e50:	fa03 f202 	lsl.w	r2, r3, r2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d9af      	bls.n	8000dc6 <GPIO_Init+0x11a>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6053      	str	r3, [r2, #4]
  }
}
 8000e6c:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	46c0      	nop			(mov r8, r8)

08000e78 <GPIO_StructInit>:
*                    which will be initialized.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e86:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	f04f 0302 	mov.w	r3, #2	; 0x2
 8000e8e:	6053      	str	r3, [r2, #4]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	f04f 0304 	mov.w	r3, #4	; 0x4
 8000e96:	6093      	str	r3, [r2, #8]
}
 8000e98:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			(mov r8, r8)

08000ea4 <GPIO_ReadInputDataBit>:
*                    This parameter can be GPIO_Pin_x where x can be (0..15).
* Output         : None
* Return         : The input port pin value.
*******************************************************************************/
u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
  u8 bitstatus = 0x00;
 8000eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert(IS_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	ea02 0303 	and.w	r3, r2, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (u8)Bit_SET;
 8000ec4:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e002      	b.n	8000ed2 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (u8)Bit_RESET;
 8000ecc:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f107 0714 	add.w	r7, r7, #20	; 0x14
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <GPIO_ReadInputData>:
* Input          : - GPIOx: where x can be (A..E) to select the GPIO peripheral.
* Output         : None
* Return         : GPIO input data port value.
*******************************************************************************/
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((u16)GPIOx->IDR);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	b29b      	uxth	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	46c0      	nop			(mov r8, r8)

08000efc <GPIO_ReadOutputDataBit>:
*                    This parameter can be GPIO_Pin_x where x can be (0..15).
* Output         : None
* Return         : The output port pin value.
*******************************************************************************/
u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  u8 bitstatus = 0x00;
 8000f08:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000f0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert(IS_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	ea02 0303 	and.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (u8)Bit_SET;
 8000f1c:	f04f 0301 	mov.w	r3, #1	; 0x1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e002      	b.n	8000f2a <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (u8)Bit_RESET;
 8000f24:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f107 0714 	add.w	r7, r7, #20	; 0x14
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <GPIO_ReadOutputData>:
* Input          : - GPIOx: where x can be (A..E) to select the GPIO peripheral.
* Output         : None
* Return         : GPIO output data port value.
*******************************************************************************/
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((u16)GPIOx->ODR);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	b29b      	uxth	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	46c0      	nop			(mov r8, r8)

08000f54 <GPIO_WriteBit>:
*                       - Bit_SET: to set the port pin
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert(IS_GPIO_PIN(GPIO_Pin));
  assert(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <GPIO_WriteBit+0x1c>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f68:	897a      	ldrh	r2, [r7, #10]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	e002      	b.n	8000f76 <GPIO_WriteBit+0x22>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8000f70:	897a      	ldrh	r2, [r7, #10]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	615a      	str	r2, [r3, #20]
  }
}
 8000f76:	f107 0714 	add.w	r7, r7, #20	; 0x14
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <GPIO_Write>:
*                    data register.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  GPIOx->ODR = PortVal;
 8000f8c:	887a      	ldrh	r2, [r7, #2]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60da      	str	r2, [r3, #12]
}
 8000f92:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <GPIO_PinLockConfig>:
*                    This parameter can be GPIO_Pin_x where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
  u32 tmp = 0x00010000;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ea43 0302 	orr.w	r3, r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	60fb      	str	r3, [r7, #12]
}
 8000fd6:	f107 0714 	add.w	r7, r7, #20	; 0x14
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <GPIO_EventOutputConfig>:
*                    This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
  u32 tmpreg = 0x00;
 8000ff0:	f04f 0300 	mov.w	r3, #0	; 0x0
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_GPIO_PORT_SOURCE(GPIO_PortSource));
  assert(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000ff6:	f240 0300 	movw	r3, #0	; 0x0
 8000ffa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001008:	f2c0 0300 	movt	r3, #0	; 0x0
 800100c:	ea02 0303 	and.w	r3, r2, r3
 8001010:	60fb      	str	r3, [r7, #12]
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	ea4f 1203 	mov.w	r2, r3, lsl #4
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	ea43 0302 	orr.w	r3, r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8001020:	79ba      	ldrb	r2, [r7, #6]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ea43 0302 	orr.w	r3, r3, r2
 8001028:	60fb      	str	r3, [r7, #12]

  AFIO->EVCR = tmpreg;
 800102a:	f240 0300 	movw	r3, #0	; 0x0
 800102e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	f107 0714 	add.w	r7, r7, #20	; 0x14
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <GPIO_EventOutputCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8001048:	f240 031c 	movw	r3, #28	; 0x1c
 800104c:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	f107 070c 	add.w	r7, r7, #12	; 0xc
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	46c0      	nop			(mov r8, r8)

08001060 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 800106a:	f04f 0300 	mov.w	r3, #0	; 0x0
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	f04f 0300 	mov.w	r3, #0	; 0x0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	f04f 0300 	mov.w	r3, #0	; 0x0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	f04f 0300 	mov.w	r3, #0	; 0x0
 8001080:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert(IS_GPIO_REMAP(GPIO_Remap));
  assert(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8001082:	f240 0300 	movw	r3, #0	; 0x0
 8001086:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001094:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001098:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80010a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80010a4:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & DBGAFR_LOCATION_MASK) == DBGAFR_LOCATION_MASK)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <GPIO_PinRemapConfig+0x5a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	e019      	b.n	80010ee <GPIO_PinRemapConfig+0x8e>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00d      	beq.n	80010e0 <GPIO_PinRemapConfig+0x80>
  {
    tmp1 = ((u32)0x03) << tmpmask;
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	f04f 0303 	mov.w	r3, #3	; 0x3
 80010ca:	fa03 f302 	lsl.w	r3, r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	ea6f 0203 	mvn.w	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	ea03 0302 	and.w	r3, r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e006      	b.n	80010ee <GPIO_PinRemapConfig+0x8e>
  }
  else
  {
    tmpreg &= ~tmp;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	ea6f 0203 	mvn.w	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	ea03 0302 	and.w	r3, r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d011      	beq.n	8001118 <GPIO_PinRemapConfig+0xb8>
  {
    if ((GPIO_Remap & DBGAFR_LOCATION_MASK) == DBGAFR_LOCATION_MASK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <GPIO_PinRemapConfig+0xae>
    {
      tmpreg |= (tmp << 0x10);
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	ea43 0302 	orr.w	r3, r3, r2
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	e004      	b.n	8001118 <GPIO_PinRemapConfig+0xb8>
    }
    else
    {
      tmpreg |= tmp;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	ea43 0302 	orr.w	r3, r3, r2
 8001116:	613b      	str	r3, [r7, #16]
    }
  }
  AFIO->MAPR = tmpreg;
 8001118:	f240 0300 	movw	r3, #0	; 0x0
 800111c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	605a      	str	r2, [r3, #4]
}
 8001124:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	46c0      	nop			(mov r8, r8)

08001130 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8001130:	b490      	push	{r4, r7}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
  u32 tmp = 0x00;
 8001140:	f04f 0300 	mov.w	r3, #0	; 0x0
 8001144:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert(IS_GPIO_PORT_SOURCE(GPIO_PortSource));
  assert(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	f003 0303 	and.w	r3, r3, #3	; 0x3
 800114c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001150:	f04f 030f 	mov.w	r3, #15	; 0xf
 8001154:	fa03 f302 	lsl.w	r3, r3, r2
 8001158:	60fb      	str	r3, [r7, #12]

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800115a:	f240 0100 	movw	r1, #0	; 0x0
 800115e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f240 0200 	movw	r2, #0	; 0x0
 8001170:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f103 0302 	add.w	r3, r3, #2	; 0x2
 8001180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	ea6f 0303 	mvn.w	r3, r3
 800118a:	ea02 0203 	and.w	r2, r2, r3
 800118e:	f100 0302 	add.w	r3, r0, #2	; 0x2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8001196:	f240 0100 	movw	r1, #0	; 0x0
 800119a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	461c      	mov	r4, r3
 80011a8:	f240 0200 	movw	r2, #0	; 0x0
 80011ac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f103 0302 	add.w	r3, r3, #2	; 0x2
 80011bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	f003 0303 	and.w	r3, r3, #3	; 0x3
 80011c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	ea40 0203 	orr.w	r2, r0, r3
 80011d4:	f104 0302 	add.w	r3, r4, #2	; 0x2
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011dc:	f107 0710 	add.w	r7, r7, #16	; 0x10
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc90      	pop	{r4, r7}
 80011e4:	4770      	bx	lr
 80011e6:	46c0      	nop			(mov r8, r8)

080011e8 <APBAHBPrescTable>:
 80011e8:	0000 0000 0201 0403 0201 0403 0706 0908     ................

080011f8 <ADCPrescTable>:
 80011f8:	0402 0806                                   ....
