#!/usr/bin/env python
"""Support for downloading and communicating with the flashif support program"""

import os
import StringIO
import array

import ihex
import sambaif

# This is the 'flashif.hex' program from the flashif directory above this one.
# See the documentation in that directory for instructions on how to modify
# this hex code. The program represented by this hex code is a bootloader for
# FLASH programming.  It is loaded into RAM at 0x202000 when the 'flash'
# command is given. Sam_I_Am then communicates with this bootloader in order to
# program the FLASH. As a consequence, any RAM contents at 0x202000 is lost
# when the 'flash' command is given to Sam_I_Am.
hexcode = \
""":020000040020DA
:102000000DC0A0E1F0DF2DE904B04CE208D04DE2B4
:102010004FCAE0E33FCD4CE24F1AE0E3CB2F11E58E
:10202000E33F11E5010013E2425002E29D00001A75
:10203000000055E3F8FFFF0AA0679FE5A0779FE542
:102040001D2CA0E39C479FE50FA082E2000086E5DF
:1020500000A087E5000084E530500BE54F0AE0E37F
:102060003F2D40E20B3012E5050013E10700001A96
:1020700002C0A0E13F2D82E2E31F12E5010011E35F
:102080006501001ACB1F12E5050011E1F9FFFF0AF7
:102090004F2AE0E3CBCF12E52C48A0E1843AA0E13F
:1020A000A3AAA0E140005AE30A10A0314010A023E7
:1020B0000020A0E3010052E10700002A28C79FE5A5
:1020C0004F0AE0E3FA0E40E20BA010E502A0CCE7D5
:1020D000012082E2010052E1FAFFFF3A4F2AE0E3D9
:1020E0003F4D42E20BC014E50530CCE10B3004E576
:1020F00001A0A0E1020015E30040A0E30250A0030C
:102100004050A0130A0054E13800002ADC869FE505
:10211000DC969FE5D0269FE502C084E000E0DCE588
:102120000110A0E329004BE2B020D7E129E04BE504
:10213000B80100EB001096E50038A0E12308A0E10B
:10214000000087E5014084E2070051E301F19F9719
:10215000240000EADC24200074212000B4242000A4
:10216000D023200074252000102520009C2320006F
:102170002423200074069FE50030D0E5011083E29F
:102180000010C0E500C0D0E568169FE529205BE59A
:1021900002005CE30320C1E71200001A58369FE5F5
:1021A0000020D3E5B030D1E144169FE5010052E3B1
:1021B000003081E53E01000A3A0100BA030052E313
:1021C000380100CA003091E5000053E30230A0134B
:1021D0000030861501308312C700001A0030C0E5B8
:1021E0000300A0E3000086E50A0054E1C8FFFF3ABF
:1021F000F0159FE500C091E500005CE396FFFF0A43
:1022000030201BE5020055E12400000A4F3AE0E3CC
:102210003F2D43E20B0012E5050010E10700001A14
:1022200002C0A0E13F2D82E2E31F12E5010011E3AD
:102230002901001ACB0F12E5050010E1F9FFFF0A92
:102240004F0AE0E3CB3F10E52328A0E1821AA0E18A
:10225000A1CAA0E140005CE30C00A0314000A02333
:102260000020A0E3000052E10700002A4F1AE0E33B
:1022700074C59FE5FA1E41E20B3011E50230CCE750
:10228000012082E2000052E1FAFFFF3A4F2AE0E328
:102290003FCD42E20B101CE50500C1E10B000CE54F
:1022A00028D04BE2F0AF9DE850059FE54F1AE0E3E0
:1022B0003F2D41E2073012E5103013E2FCFFFF1A18
:1022C0000320A0E14F1AE0E3FA1E41E20230D0E71A
:1022D000012082E2020052E3073001E5FAFFFF3AF3
:1022E00007101CE5102081E307200CE54F0AE0E30E
:1022F0003F2D40E207C012E501001CE3FCFFFF0A8E
:10230000071012E50100C1E3070002E54F3AE0E3E0
:102310003F2D43E207C012E501001CE3FCFFFF1A5A
:10232000DEFFFFEAC4C49FE50010DCE5010081E2A6
:102330000000CCE50020DCE5B8049FE529305BE532
:10234000040052E30130C0E7A6FFFF1AB0149FE576
:10235000003099E5002091E5000090E5043043E26B
:10236000003089E5000082E5000091E5002099E554
:10237000043080E2003081E5000052E30010A0E369
:102380000010CCE597FFFF1A0330A0E3003086E58C
:102390000A0054E15EFFFF3A94FFFFEA001099E55E
:1023A00060349FE529005BE501C041E2000083E560
:1023B0000720A0E30030A0E30A0054E1002086E5F6
:1023C00000C089E50030C8E551FFFF3A87FFFFEA0A
:1023D0000000D8E5011080E2FF2001E2020052E394
:1023E0000010C8E57FFFFF1A1C049FE500C090E5C0
:1023F00000005CE30800001A003097E5000053E39A
:102400000430A0130300001A0A0054E10A40A0118E
:102410000530A0137700000A003080E5001090E539
:10242000E8C39FE581208CE04F0AE0E33F1D40E2D6
:10243000073011E5103013E2FCFFFF1A0310A0E192
:102440004F0AE0E3FA0E40E201C0D2E7011081E258
:10245000020051E307C000E5FAFFFF3A4F2AE0E32C
:102460003F2D42E2073012E5101083E3071002E52A
:10247000070012E5010010E3FCFFFF0A073012E538
:102480000110C3E3071002E54FCAE0E33F2D4CE221
:10249000070012E5010010E3FCFFFF1A1DCCA0E3CA
:1024A0000F208CE20030A0E3002087E5003086E5B5
:1024B000B6FFFFEA003099E5013043E2000053E344
:1024C000003089E50030C80503308302AEFFFF0A03
:1024D0000A0054E10EFFFF3A44FFFFEA29305BE5B2
:1024E00014C39FE50100A0E30010A0E3000086E50F
:1024F0000010C8E50030CCE50030A0E308C39FE53C
:102500000A0054E100308CE501FFFF3A37FFFFEA93
:102510000030D8E5010083E20000C8E50000D8E5FE
:10252000D0129FE529C05BE5020050E303C0C1E77C
:102530002CFFFF1AB030D1E100C099E5D0129FE521
:10254000010B53E302204CE2003081E5002089E5D5
:102550000630A0338CFFFF3A000086E5A8029FE515
:102560000310A0E30A0054E1001080E5E8FEFF3A02
:102570001EFFFFEA74029FE50010D0E501C081E272
:1025800000C0C0E50020D0E568C29FE529305BE5CA
:10259000040052E30130CCE712FFFF1A00209CE553
:1025A000003099E558C29FE5041043E2030012E3AE
:1025B0000030A0E300208CE50030C0E5001089E584
:1025C0000900001A010652E30700003A020652E32E
:1025D0000500002A02C081E004104CE2020021E064
:1025E000FF20D0E30530A00367FFFF0A0220A0E32D
:1025F000002086E5D8FFFFEAFC119FE50030D1E519
:10260000010053E35600000A020053E3D4219F0562
:102610000130A003003082057FFFFFEADC019FE567
:102620004F4AE0E33F2D44E207A012E510301AE2E2
:10263000FCFFFF1A0320A0E14F3AE0E3FA1E43E259
:102640000240D0E7012082E2020052E3074001E5A8
:10265000FAFFFF3A07001CE5102080E307200CE595
:102660004FCAE0E33F2D4CE2071012E5010011E3F1
:10267000FCFFFF0A074012E50130C4E3073002E522
:102680004FAAE0E33F2D4AE207C012E501301CE209
:10269000FCFFFF1A4C219FE50100A0E303A0A0E18D
:1026A000000082E592FEFFEA0230A0E3003086E5FA
:1026B00091FFFFEA0A0053E30400009A031043E28B
:1026C000032011E20020C0050430A0032EFFFF0A02
:1026D0000330A0E300C086E587FFFFEA1C019FE509
:1026E0004F2AE0E33F2D42E2073012E5103013E2BB
:1026F000FCFFFF1A0320A0E14F1AE0E3FA1E41E2BB
:102700000230D0E7012082E2020052E3073001E507
:10271000FAFFFF3A07201CE5100082E307000CE5F2
:102720004FCAE0E33F2D4CE2071012E5010011E330
:10273000FCFFFF0A070012E501C0C0E307C002E585
:102740004F3AE0E33F2D43E2071012E5010011E3A9
:10275000FCFFFF1A8C209FE50130A0E3003082E5EA
:10276000CEFEFFEAA8C09FE598109FE500209CE5FB
:10277000003091E502CBA0E12C2BA0E1000053E357
:102780000224A0E15A2482135A24820303208213D4
:10279000012082039710E0E3003091E5010013E38C
:1027A000FCFFFF0A9B10E0E3002081E5043081E29A
:1027B000002093E5010012E3FCFFFF0A00C093E54F
:1027C0000C3082E1040013E30630A01311FFFF1A5E
:1027D000080013E310FFFF0A0730A0E30DFFFFEA34
:1027E000102920005C2920000C2920001C29200031
:1027F0006829200064292000182920007029200061
:102800007A2820006C29200060292000142920004B
:10281000782820007429200070402DE90228A0E1CA
:1028200000E051E20040A0E122C8A0E10D00000A52
:1028300038609FE538509FE50110D4E40C3021E06A
:102840000F0003E2F02003E2223196E7001195E742
:10285000012023E02C0422E00038A0E101E05EE248
:1028600023C8A0E1F3FFFF1A0C00A0E17080BDE8CF
:08287000CC2820008C28200078
:102878004F4B414242434246434545584C455045DB
:102888000000000000000000891100001223000071
:102898009B32000024460000AD570000366500005A
:1028A800BF740000488C0000C19D00005AAF0000B2
:1028B800D3BE00006CCA0000E5DB00007EE9000022
:1028C800F7F800000000000081100000022100005D
:1028D80083310000044200008552000006630000B6
:1028E8008773000008840000899400000AA500008E
:1028F8008BB500000CC600008DD600000EE7000066
:042908008FF7000045
:0400000500202000B7
:00000001FF"""

def readReply(options):
  s = ""
  while 1:
    L = options.poll.poll(options.Timeout)
    if L:
      while 1:
        c = os.read(options.dev, 2)
        if len(c)==0:
          break
        s += c
        if len(s) >= 2:
          return s
    else:
      raise samiam.CommandException, "FLASH bootloader not responding"

def errorstr(reply):
  Replies = {
    'OK': "No error",
    'AB': "Interrupted by USB SETUP transaction...returning to SAM-BA",
    'BC': "Internal error: illegal command. This shouldn't happen.",
    'BF': "Internal error: bad command format. This shouldn't happen.",
    'CE': "Internal error: CRC error. This shouldn't happen.",
    'EX': "Internal error: data packet too long. This shouldn't happen.",
    'LE': "Locking error violation",
    'PE': "FLASH programming error"
    }

  try:
    str = Replies[reply]
  except:
    str = "Unknown reply code '%s'" % reply

  return str

def upload(obj):
  if 1:
    S = StringIO.StringIO(hexcode)
    datalines, startaddr = ihex.readHEX(S)
  else:
    # Change 'if 1' to 'if 0' above if you want to experiment with
    # new bootloaders and don't want to have to cut-and-paste new
    # flashif.hex files into this file every time they change.
    datalines, startaddr = ihex.readHEX('../flashif/flashif.hex')

  sambaif.doSend(obj.options, datalines)
  sambaif.doGo(obj.options, [startaddr])

  # We expect '\n\r' from SAM-BA just prior to doing the actual jump to our code
  s = readReply(obj.options)

crctableA=[0x0000, 0x1081, 0x2102, 0x3183, 0x4204, 0x5285, 0x6306, 0x7387, 0x8408, 0x9489, 0xA50A, 0xB58B, 0xC60C, 0xD68D, 0xE70E, 0xF78F]
crctableB=[0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF, 0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7]

def crc16(data, crc, crctableA=crctableA, crctableB=crctableB):
  for val in data:
    val ^= crc
    crc = crctableA[(val & 0xF0) >> 4] ^ crctableB[val & 0x0F] ^ (crc >> 8)

  return crc

def sendcmd(obj, cmd, payload):
  data = array.array('B', '\x00'*(len(payload)+5))
  data[0] = cmd
  data[1] = len(payload) & 0xFF
  data[2] = (len(payload) >> 8) & 0xFF
  data[3:3+len(payload)] = payload
  crc = crc16(data[:3+len(payload)], 0x1D0F)
  data[-2] = crc & 0xFF
  data[-1] = (crc >> 8) & 0xFF
  #print '>', len(data), ':', data
  os.write(obj.options.dev, data)
  reply = readReply(obj.options)
  #print '<', reply
  return reply

def cmd_Nothing(obj):
  return sendcmd(obj, 0x03, array.array('B'))

def cmd_Exit(obj):
  return sendcmd(obj, 0x02, array.array('B'))

def cmd_WriteData(obj, addr, pagenum, data):
  header = array.array('B', '\x00'*7)
  header[0] = addr & 0xFF
  header[1] = (addr >> 8) & 0xFF
  header[2] = (addr >> 16) & 0xFF
  header[3] = (addr >> 24) & 0xFF
  header[4] = pagenum & 0xFF
  header[5] = (pagenum >> 8) & 0xFF
  header[6] = 0   # lock flag
  return sendcmd(obj, 0x01, header+data)
