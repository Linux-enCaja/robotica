/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectFrame.java
 *
 * Created on 30/05/2011, 11:00:21 PM
 */

package boundary;

import control.ControlInstruction;
import entity.Ecbot;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author solid
 */
public class ConnectFrame extends JFrame {

    PrincipalFrame parent;
    /** Creates new form ConnectFrame */
    public ConnectFrame(PrincipalFrame parent) {
        initComponents();
        this.parent = parent;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameL = new javax.swing.JLabel();
        ipL = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        ipTF = new javax.swing.JTextField();
        connectB = new javax.swing.JButton();
        cancelB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Connect");
        setBounds(new java.awt.Rectangle(100, 100, 480, 320));

        nameL.setText("Name");

        ipL.setText("IP");

        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        connectB.setText("Connect");
        connectB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBActionPerformed(evt);
            }
        });

        cancelB.setText("Cancel");
        cancelB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameL, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipTF, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectB, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameL)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipL)
                    .addComponent(ipTF, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(connectB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed

    private void cancelBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBActionPerformed
        parent.setEnabled(true);
        dispose();
    }//GEN-LAST:event_cancelBActionPerformed

    private void connectBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBActionPerformed
        if (!nameTF.getText().equals("") && !ipTF.getText().equals("") ){
            try{                
                ControlInstruction control = new ControlInstruction(ipTF.getText());
                Ecbot ecbot = new Ecbot(nameTF.getText(),control);
                //Validar que no exista una coneccion anterior...
                int validation = parent.validateConnection(ecbot);
                if (validation == -1){
                    JOptionPane.showMessageDialog(this, "Existe una coneccion anterior con el mismo nombre ", "Error" ,JOptionPane.ERROR_MESSAGE);
                }
                else if (validation == -2){
                    JOptionPane.showMessageDialog(this, "Existe una coneccion anterior al Host ", "Error" ,JOptionPane.ERROR_MESSAGE);
                }
                else{
                    if (control.connect() == 0){
                    parent.setEnabled(true);
                parent.addConnection(ecbot);
                    dispose();
                    }else{
                        JOptionPane.showMessageDialog(this, "Imposible conectar con el Host que introdujo", "Error" ,JOptionPane.ERROR_MESSAGE);
                    }
                }
            }catch(Exception exc){

            }
        }
    }//GEN-LAST:event_connectBActionPerformed

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelB;
    private javax.swing.JButton connectB;
    private javax.swing.JLabel ipL;
    private javax.swing.JTextField ipTF;
    private javax.swing.JLabel nameL;
    private javax.swing.JTextField nameTF;
    // End of variables declaration//GEN-END:variables

}
